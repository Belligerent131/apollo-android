package com.apollographql.apollo.gradle.api {

  public abstract interface ApolloExtension implements com.apollographql.apollo.gradle.api.CompilerParams {
    method public abstract void onCompilationUnit(error.NonExistentClass);
    method public abstract void service(error.NonExistentClass, error.NonExistentClass);
  }

  public abstract class ApolloGenerateOperationIdsTask {
    ctor public ApolloGenerateOperationIdsTask();
    method public abstract error.NonExistentClass generateOperationOutput(error.NonExistentClass);
    method public final error.NonExistentClass getFilesUsedForUpToDateChecks();
    method public abstract error.NonExistentClass getOperationList();
    method public abstract error.NonExistentClass getOperationOutput();
    method public final void taskAction();
    property public final error.NonExistentClass filesUsedForUpToDateChecks;
    property public abstract error.NonExistentClass operationList;
    property public abstract error.NonExistentClass operationOutput;
  }

  public abstract interface CompilationUnit implements com.apollographql.apollo.gradle.api.CompilerParams {
    method public abstract error.NonExistentClass getAndroidVariant();
    method public abstract error.NonExistentClass getName();
    method public abstract error.NonExistentClass getOperationOutputFile();
    method public abstract error.NonExistentClass getOutputDir();
    method public abstract error.NonExistentClass getServiceName();
    method public abstract error.NonExistentClass getVariantName();
    method public abstract <T> void setGenerateOperationIdsTaskProvider(error.NonExistentClass, kotlin.jvm.functions.Function1<? super T, ? extends error.NonExistentClass>, kotlin.jvm.functions.Function1<? super T, ? extends error.NonExistentClass>);
    method public abstract <T extends com.apollographql.apollo.gradle.api.ApolloGenerateOperationIdsTask> void setGenerateOperationIdsTaskProvider(error.NonExistentClass);
    property public abstract error.NonExistentClass androidVariant;
    property public abstract error.NonExistentClass name;
    property public abstract error.NonExistentClass operationOutputFile;
    property public abstract error.NonExistentClass outputDir;
    property public abstract error.NonExistentClass serviceName;
    property public abstract error.NonExistentClass variantName;
  }

  public abstract interface CompilerParams {
    method public abstract error.NonExistentClass getCustomTypeMapping();
    method public abstract error.NonExistentClass getGenerateAsInternal();
    method public abstract error.NonExistentClass getGenerateKotlinModels();
    method public abstract error.NonExistentClass getGenerateModelBuilder();
    method public abstract error.NonExistentClass getGenerateOperationOutput();
    method public abstract error.NonExistentClass getGenerateVisitorForPolymorphicDatatypes();
    method public abstract error.NonExistentClass getGraphqlSourceDirectorySet();
    method public abstract error.NonExistentClass getNullableValueType();
    method public abstract error.NonExistentClass getOperationIdGenerator();
    method public abstract error.NonExistentClass getRootPackageName();
    method public abstract error.NonExistentClass getSchemaFile();
    method public abstract error.NonExistentClass getSealedClassesForEnumsMatching();
    method public abstract error.NonExistentClass getSuppressRawTypesWarning();
    method public abstract error.NonExistentClass getUseJavaBeansSemanticNaming();
    method public abstract error.NonExistentClass getUseSemanticNaming();
    property public abstract error.NonExistentClass customTypeMapping;
    property public abstract error.NonExistentClass generateAsInternal;
    property public abstract error.NonExistentClass generateKotlinModels;
    property public abstract error.NonExistentClass generateModelBuilder;
    property public abstract error.NonExistentClass generateOperationOutput;
    property public abstract error.NonExistentClass generateVisitorForPolymorphicDatatypes;
    property public abstract error.NonExistentClass graphqlSourceDirectorySet;
    property public abstract error.NonExistentClass nullableValueType;
    property public abstract error.NonExistentClass operationIdGenerator;
    property public abstract error.NonExistentClass rootPackageName;
    property public abstract error.NonExistentClass schemaFile;
    property public abstract error.NonExistentClass sealedClassesForEnumsMatching;
    property public abstract error.NonExistentClass suppressRawTypesWarning;
    property public abstract error.NonExistentClass useJavaBeansSemanticNaming;
    property public abstract error.NonExistentClass useSemanticNaming;
  }

  public abstract interface Introspection {
    method public abstract error.NonExistentClass getEndpointUrl();
    method public abstract error.NonExistentClass getHeaders();
    method public abstract error.NonExistentClass getQueryParameters();
    method public abstract error.NonExistentClass getSourceSetName();
    property public abstract error.NonExistentClass endpointUrl;
    property public abstract error.NonExistentClass headers;
    property public abstract error.NonExistentClass queryParameters;
    property public abstract error.NonExistentClass sourceSetName;
  }

  public abstract interface Service implements com.apollographql.apollo.gradle.api.CompilerParams {
    method public abstract error.NonExistentClass getExclude();
    method public abstract error.NonExistentClass getSchemaPath();
    method public abstract error.NonExistentClass getSourceFolder();
    method public abstract void introspection(error.NonExistentClass);
    property public abstract error.NonExistentClass exclude;
    property public abstract error.NonExistentClass schemaPath;
    property public abstract error.NonExistentClass sourceFolder;
  }

}

